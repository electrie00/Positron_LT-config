# Homing override, enter your own sensitivity and current values below
[include positron_macro.cfg]

[gcode_macro HOMING_VARIABLES]
variable_xcurrent: 0.56
variable_ycurrent: 0.56

variable_xsens:    73
variable_ysens:    67

variable_home_x_position: 0
variable_home_y_position: 0
gcode:
  SET_GCODE_VARIABLE MACRO=HOMING_VARIABLES VARIABLE=home_x_position VALUE={printer["gcode_macro Standby_position"].standby_x_position}
  SET_GCODE_VARIABLE MACRO=HOMING_VARIABLES VARIABLE=home_y_position VALUE={printer["gcode_macro Standby_position"].standby_y_position}


[gcode_macro FORCE_Z_UP]
gcode: 
  FORCE_MOVE STEPPER=stepper_z DISTANCE=25 VELOCITY=20
  
[homing_override]
gcode: 
    HOMING_VARIABLES
    {% if printer.configfile.config.adxl345 %}
      RESPOND TYPE=error MSG='Check config! Is PIS connected?'
      M84
    {% else %}
      {% if not 'Z' in params and not 'Y' in params and 'X' in params %}
        FORCE_Z_UP
        HOMING_OVERRIDE_X
      {% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
        FORCE_Z_UP
        HOMING_OVERRIDE_Y
      {% elif 'Z' in params and not 'X' in params and not 'Y' in params %}
        HOMING_OVERRIDE_Z
        G1 Z80 F10000
      {% elif 'X' in params and 'Y' in params and not 'Z' in params %}
        HOMING_OVERRIDE_Y
        HOMING_OVERRIDE_X
      {% elif 'Z' in params and 'X' in params and not 'Y' in params %}
        HOMING_OVERRIDE_Z
      {% else %}
        RESPOND TYPE=echo MSG="归位所有轴"
        FORCE_Z_UP
        HOMING_OVERRIDE_Y
        HOMING_OVERRIDE_X
        HOMING_OVERRIDE_Z
        G1 Z80 F10000
      {% endif %}
    {% endif %}
    temperature_LED

[gcode_macro HOMING_OVERRIDE_X]
gcode: 
  HOME_X_LED
  RESPOND TYPE=echo MSG="X 轴归位"
  {% set HOME_CUR = printer["gcode_macro HOMING_VARIABLES"].xcurrent %}
  {% set HOME_SENS_X_AXIS = printer["gcode_macro HOMING_VARIABLES"].xsens %}
  # Retrieve used setting for stepper current and save them
  {% set RUN_CUR_X_STEPPER = printer.configfile.settings['tmc2209 stepper_x'].run_current %}
  {% set RUN_SENS_X_STEPPER = printer.configfile.settings['tmc2209 stepper_x'].driver_sgthrs %}
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
  # Pause to ensure driver stall flag is clear
  G4 P500
  SET_TMC_FIELD STEPPER=stepper_x FIELD=SGTHRS VALUE={HOME_SENS_X_AXIS}
  RESPOND TYPE=echo MSG="正在归位 X 轴……"
  G28 X0
  G91
  Unlock_Motor
  G0 X-5 F2400
  #G4 P500
  G90
  #Return to the pre-macro values
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR_X_STEPPER}
  SET_TMC_FIELD STEPPER=stepper_x FIELD=SGTHRS VALUE={RUN_SENS_X_STEPPER}
  temperature_LED

[gcode_macro HOMING_OVERRIDE_Y]
gcode: 
  HOME_Y_LED
  RESPOND TYPE=echo MSG="Y 轴归位"
  {% set HOME_CUR = printer["gcode_macro HOMING_VARIABLES"].ycurrent %}
  {% set HOME_SENS_Y_AXIS = printer["gcode_macro HOMING_VARIABLES"].ysens %}
  # Retrieve used setting for stepper current and save them
  {% set RUN_CUR_Y_STEPPER = printer.configfile.settings['tmc2209 stepper_y'].run_current %}
  {% set RUN_SENS_Y_STEPPER = printer.configfile.settings['tmc2209 stepper_y'].driver_sgthrs %}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
  # Pause to ensure driver stall flag is clear
  G4 P500
  SET_TMC_FIELD STEPPER=stepper_y FIELD=SGTHRS VALUE={HOME_SENS_Y_AXIS}
  RESPOND TYPE=echo MSG="正在归位 Y 轴……"
  G28 Y0
  G91
  Unlock_Motor
  G0 Y10 F2400
  #G4 P500
  G90
  #Return to the pre-macro values
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR_Y_STEPPER}
  SET_TMC_FIELD STEPPER=stepper_y FIELD=SGTHRS VALUE={RUN_SENS_Y_STEPPER}
  temperature_LED


[gcode_macro HOMING_OVERRIDE_Z]
gcode: 
  HOME_Z_LED
  RESPOND TYPE=echo MSG="Z 轴归位"
  {% set homelocation_x = printer["gcode_macro HOMING_VARIABLES"].home_x_position %}
  {% set homelocation_y = printer["gcode_macro HOMING_VARIABLES"].home_y_position %}
  {% if printer.heater_bed.temperature <0 %}
    RESPOND TYPE=error MSG="热床未连接， Z 归位取消"
    CANCEL_PRINT
    error_LED
    G0 X80 Y136.50 F10000
    G4 P2000
    temperature_LED
    SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
  {% elif "xy" not in printer.toolhead.homed_axes %}
    RESPOND TYPE=echo MSG="需要先将 X,Y 轴归位"
    HOMING_OVERRIDE_Y
    HOMING_OVERRIDE_X
    RESPOND TYPE=echo MSG="正在归位 Z 轴……"
    G90
    G0 X{homelocation_x} Y{homelocation_y} F10000
    G28 Z0
  {% else %} 
    RESPOND TYPE=echo MSG="正在归位 Z 轴……"
    G90
    G0 X{homelocation_x} Y{homelocation_y} F10000
    G28 Z0
  RESPOND TYPE=error MSG="归位完成"
  {% endif %}




