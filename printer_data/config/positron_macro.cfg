[include homing_override.cfg]

[gcode_macro Standby_position]
variable_standby_x_position: 80 
variable_standby_y_position: 142.50
variable_standby_z_position: 80
gcode:




[gcode_macro Unlock_Motor] 
gcode:   
    SET_KINEMATIC_POSITION
    

[gcode_macro UNLOAD_FILAMENT]
gcode = 

  M83 
  M104 S200 ; set extruder temp
  G1 E-100 F2000
  G1 E-100 F2000
  G1 E-100 F2000
  G1 E-50 F2000
  M104 S0
  G92 E0
  G90




[gcode_shell_command PRINT_START]
command: bash /home/klipper/printer_data/config/PRINT_START.sh {params.EXTRUDERTEMP} {params.BEDTEMP}
timeout: 3
verbose: True

[gcode_macro PRINT_START]
gcode:
  {% set extruder_temp = params.EXTRUDERTEMP|default(200)|int %}
  {% set bed_temp = params.BEDTEMP|default(60)|int %}
  RESPOND TYPE=echo MSG="异步启动打印准备中..."
  RUN_SHELL_COMMAND CMD=PRINT_START PARAMS="EXTRUDERTEMP={ extruder_temp } BEDTEMP={ bed_temp }"







[gcode_macro PRINT_END]
gcode:
  
  M104 S0
  M140 S0
  complete
  # Retract the filament
  {% if printer.toolhead.position.z > 80 %}
    G91
    G1 Z20 F5000
    G90
  {% else %}
    G90
    G1 Z80 F5000
  {% endif %}
  G1 X80 Y142.50 F10000
  M84
  G90
  G4  P1000 ; wait a second
  temperature_LED


[gcode_macro over]
gcode:
  M104 S200 ; set extruder temp
  heater_active
  G28
  G0 X131 Y62 Z0 F10000
  UNLOAD_FILAMENT



[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_macro cut_filament]
gcode:
  {% set homelocation_x = printer["gcode_macro HOMING_VARIABLES"].home_x_position %}
  {% set homelocation_y = printer["gcode_macro HOMING_VARIABLES"].home_y_position %}
  
  G90
  G0 X102 Y20 F10000
  G0 X102 Y-6 F25000
  G0 X{homelocation_x} Y{homelocation_y} F10000

  
[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True


# === 连续挤出直到 filament_switch_sensor 触发（精简日志 + 触发确认延迟） ===

[gcode_macro LOAD_FILAMENT]
description: "持续小步挤出，直到指定 filament_switch_sensor 检测到耗材"
variable_running: 0
variable_sensor_name: '热端耗材'  # 默认传感器名
variable_step_mm: 5            # 每次挤出长度 (mm)
variable_feedrate: 300        # 进给 (mm/min)
variable_interval: 0.05          # 循环间隔 (秒)
variable_settle_ms: 5           # 挤出后等待的毫秒数，再次确认是否已触发
gcode:
  {% set _SENSOR   = params.SENSOR|default(printer["gcode_macro LOAD_FILAMENT"].sensor_name)|string %}
  {% set _STEP     = (params.STEP|default(printer["gcode_macro LOAD_FILAMENT"].step_mm))|float %}
  {% set _FEED     = (params.FEED|default(printer["gcode_macro LOAD_FILAMENT"].feedrate))|float %}
  {% set _INTERVAL = (params.INTERVAL|default(printer["gcode_macro LOAD_FILAMENT"].interval))|float %}
  {% set _SETTLE   = (params.SETTLE|default(printer["gcode_macro LOAD_FILAMENT"].settle_ms))|int %}

  {% if not printer.extruder.can_extrude %}
    {action_respond_info("[EUS] 温度未达标，已取消启动。")}
  {% else %}
    SET_GCODE_VARIABLE MACRO=LOAD_FILAMENT VARIABLE=sensor_name VALUE="'{_SENSOR}'"
    SET_GCODE_VARIABLE MACRO=LOAD_FILAMENT VARIABLE=step_mm     VALUE={_STEP}
    SET_GCODE_VARIABLE MACRO=LOAD_FILAMENT VARIABLE=feedrate    VALUE={_FEED}
    SET_GCODE_VARIABLE MACRO=LOAD_FILAMENT VARIABLE=interval    VALUE={_INTERVAL}
    SET_GCODE_VARIABLE MACRO=LOAD_FILAMENT VARIABLE=settle_ms   VALUE={_SETTLE}
    SET_GCODE_VARIABLE MACRO=LOAD_FILAMENT VARIABLE=running     VALUE={1}
    {action_respond_info("[EUS] 连续挤出开始")}
    # 用一个很小的正数启动（避免 0.0 在部分环境下不触发）
    UPDATE_DELAYED_GCODE ID=EUS_LOOP DURATION=0.05
  {% endif %}

[gcode_macro 停止装载耗材]
description: "手动停止连续挤出循环"
gcode:
  SET_GCODE_VARIABLE MACRO=LOAD_FILAMENT VARIABLE=running VALUE={0}
  UPDATE_DELAYED_GCODE ID=EUS_LOOP DURATION=0
  {action_respond_info("[EUS] 已手动停止")}

[delayed_gcode EUS_LOOP]
gcode:
  {% set m = printer["gcode_macro LOAD_FILAMENT"] %}
  {% if m.running|int == 0 %}
    # 未在运行：不重约，直接自然结束
  {% else %}
    {% set sensor_obj = printer["filament_switch_sensor " ~ m.sensor_name] %}
    {% if sensor_obj.filament_detected %}
      # 触发：清运行并取消后续定时器
      SET_GCODE_VARIABLE MACRO=LOAD_FILAMENT VARIABLE=running VALUE={0}
      UPDATE_DELAYED_GCODE ID=EUS_LOOP DURATION=0
      {action_respond_info("[EUS] 传感器触发，已停止")}
    {% else %}
      {% if not printer.extruder.can_extrude %}
        SET_GCODE_VARIABLE MACRO=LOAD_FILAMENT VARIABLE=running VALUE={0}
        UPDATE_DELAYED_GCODE ID=EUS_LOOP DURATION=0
        {action_respond_info("[EUS] 温度不足，已停止")}
      {% else %}
        # 挤出一步，并在挤出后等待 settle_ms，再次确认是否触发
        SAVE_GCODE_STATE NAME=__EUS
        ; 多挤出机可启用下一行并改名：
        ; ACTIVATE_EXTRUDER EXTRUDER=extruder
        M83
        G91
        G1 E{m.step_mm} F{m.feedrate}
        G4 P{m.settle_ms}
        RESTORE_GCODE_STATE NAME=__EUS

        {% set sensor_obj2 = printer["filament_switch_sensor " ~ m.sensor_name] %}
        {% if sensor_obj2.filament_detected %}
          # 挤出后在 settle 窗口内触发 → 立即停止且不重约
          SET_GCODE_VARIABLE MACRO=LOAD_FILAMENT VARIABLE=running VALUE={0}
          UPDATE_DELAYED_GCODE ID=EUS_LOOP DURATION=0
          {action_respond_info("[EUS] 传感器触发，已停止")}
        {% else %}
          # 否则安排下一轮
          UPDATE_DELAYED_GCODE ID=EUS_LOOP DURATION={m.interval}
        {% endif %}
      {% endif %}
    {% endif %}
  {% endif %}
